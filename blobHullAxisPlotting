# Run the code with arguments 1)input image name 2) output(filtered blob) image name 
# Bring the  "Original" window in front
# Click on the pixes of which color areas are to be detected
# Cleick multiple such pizels to cover the entire H, S V range in thresholding
# press a key (indictes you are done with feeding pixels)
# The results of border detection with show up
# Press a key again to exit the program
import cv2
import numpy as np
from numpy import linalg as LA
import sys
from matplotlib  import pyplot as plt

windowX,windowY = 0,0

# a simple and short routine to show an image using namedWindow
def showMe(name,image):
    global windowX,windowY
    cv2.namedWindow(name,cv2.WINDOW_AUTOSIZE)
    cv2.imshow(name,image)
    #cv2.moveWindow(name,windowX,windowY)
    tup = image.shape
    windowX= windowX+tup[1] +4
    if windowX > 1366:
        windowX=0
        windowY= windowY+tup[0]
        if windowY > 784:
            windowY=0

class thresholding:

    minHSV = np.array([-1,-1,-1]) # stores lower bound of HSV values
    maxHSV = np.array([-1,-1,-1]) #stores upper bound of HSV
    H=np.zeros((2,2),np.uint8)
    S=np.zeros((2,2),np.uint8)
    V=np.zeros((2,2),np.uint8)
    HSV = np.zeros((2,2,1),np.uint8)
    
    #cx,cy
    def thresholding():
        pass
     # routine to update threshold
    def updateHSVlimits(self,x,y):
        #global minHSV, maxHSV
        if self.minHSV[0] == -1:
            self.minHSV[0] = self.H[x,y]
            self.minHSV[1] = self.S[x,y]
            self.minHSV[2] = self.V[x,y]
        if self.maxHSV[0] == -1:
            self.maxHSV[0] = self.H[x,y]
            self.maxHSV[1] = self.S[x,y]
            self.maxHSV[2] = self.V[x,y]
                
        if self.minHSV[0] >= self.H[x,y]:
            self.minHSV[0] = self.H[x,y]
        if self.minHSV[1] >= self.S[x,y]:
            self.minHSV[1] = self.S[x,y]
        if self.minHSV[2] >= self.V[x,y]:
            self.minHSV[2] = self.V[x,y]
            
        if self.maxHSV[0] <= self.H[x,y]:
            self.maxHSV[0] = self.H[x,y]
        if self.maxHSV[1] <= self.S[x,y]:
            self.maxHSV[1] = self.S[x,y]
        if self.maxHSV[2] <= self.V[x,y]:
            self.maxHSV[2] = self.V[x,y]
            
    def mouseCallBack(self,event,x,y,flags,params):
        if event == cv2.EVENT_LBUTTONUP:
        # print x,y,"hue :", H[y,x]
            self.updateHSVlimits(y,x)

        #global myFilt,
            myFilt = cv2.inRange(self.HSV,self.minHSV,self.maxHSV)
            M = cv2.moments(myFilt)
            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])
            covar = np.matrix([[M['mu20'],M['mu11']],[M['mu11'],M['mu02']]])
            #print covar
            #W, Vect = LA.eig(covar)
            #print W
            #print Vect
            cv2.circle(myFilt,(cx,cy),5,(100,0,0),-1)
            cv2.imshow("Threshold Result",myFilt)
    
    def startRecordingThreshold(self,inputImage):
        original = inputImage#cv2.imread(imageFileName)
        showMe('Recording Threshold',original)
         # get HSV and seperate images
        self.HSV = cv2.cvtColor(original,cv2.COLOR_BGR2HSV)
        self.H,self.S,self.V = cv2.split(self.HSV)
        cv2.setMouseCallback('Recording Threshold',self.mouseCallBack)

    def saveThresholds(self,outputFile):
        f1 = open(outputFile,"w")
        f1.write(str(self.minHSV[0])+"\n")
        f1.write(str(self.minHSV[1])+"\n")
        f1.write(str(self.minHSV[2])+"\n")
        f1.write(str(self.maxHSV[0])+"\n")
        f1.write(str(self.maxHSV[1])+"\n")
        f1.write(str(self.maxHSV[2])+"\n")
        f1.close()

    # mousclick call back function that reads HSV values
    # from clicked pixels and updates Lower and uppper bounds 

   

# routine to apply the new thresholds and update the filtered image

    
# actual code starts here

'''orig = cv2.imread(str(sys.argv[1]))
cap = cv2.VideoCapture(0)
while cv2.waitKey(1)& 0xFF != ord('q'):
    ret,orig = cap.read()
    cv2.imshow('orig',orig)

cap.release()'''
def getFilters(inputImage, thresholdFile):
    minHSV = np.array([-1,0,-1]) # stores lower bound of HSV values
    maxHSV = np.array([-1,255,-1]) #stores upper bound of HSV
    orig = inputImage #cv2.imread(inputImage)#str(sys.argv[1]))
    #showMe("original",orig)
    myFilt = np.zeros(orig.shape)
    # Register mouse callback
    #
    # get HSV and seperate images
    HSV = cv2.cvtColor(orig,cv2.COLOR_BGR2HSV)
    H,S,V = cv2.split(HSV)

    try :
        f1 = open(thresholdFile,"r")
        minHSV[0] = int(f1.readline())
        minHSV[1] = int(f1.readline())
        minHSV[2] = int(f1.readline())
        maxHSV[0] = int(f1.readline())
        maxHSV[1] = int(f1.readline())
        maxHSV[2] = int(f1.readline())
        #print minHSV , maxHSV
        f1.close()
    except IOError:
        print 'unable to open file\n'
        return orig

    myFilt = cv2.inRange(HSV,minHSV,maxHSV)

    #print W
    #print Vect
   
   # showMe("FILTERED",myFilt)
    #create stucturing element 
    kernel = np.ones((11,11),np.uint8)
    # dilate the image with that element
    myFilt = cv2.dilate(myFilt,kernel,iterations =1)
    # Show dilated image blob
   # showMe("Dilate",myFilt)
    dist = cv2.distanceTransform(np.array(myFilt,np.uint8)*255,cv2.cv.CV_DIST_FAIR,5)
    showMe("Distance", dist+myFilt)
    # get borders of the blob
    border = cv2.Canny(myFilt,100,200)
  #  showMe("Border",border)
    masked = np.zeros(orig.shape,np.uint8)
    contours,hirarchy = cv2.findContours(myFilt,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
    i = 0
    while i <(len(contours)):
        hull = cv2.convexHull(contours[i])
        mask = np.zeros(myFilt.shape,np.uint8)
       # masked = np.zeros(myFilt.shape,np.uint8)
        cv2.drawContours(mask,contours,i,(255,0,0),thickness = cv2.cv.CV_FILLED)
        #cv2.(orig,orig,masked,mask)#(masked,mask)
        M = cv2.moments(mask)
        if M['m00'] >200000 :
            mask = mask/255
            mask = cv2.merge((mask,mask,mask))
            masked = masked + mask*orig
            showMe('Masked',masked);
        
            cx = int(M['m10']/M['m00']) 
            cy = int(M['m01']/M['m00'])
            cv2.circle(myFilt,(cx,cy),5,(100,0,0),-1)
            covar = np.matrix([[M['mu20'],M['mu11']],[M['mu11'],M['mu02']]])
            W, Vect = LA.eig(covar)
            vect1a = (int(cx),int(cy))
            vect1b = (int(cx+ M['m00']/10000*(W[0]/(W[0]+W[1]))*(Vect[0,0])),int(cy+ M['m00']/10000*(W[0]/(W[0]+W[1]))*Vect[1,0]))

            vect2a = (int(cx),int(cy))
            vect2b = (int(cx+ M['m00']/10000*(W[1]/(W[1]+W[1]))*(Vect[0,1])),int(cy+ M['m00']/10000*(W[1]/(W[1]+W[1]))*Vect[1,1]))

        #print hull
            cv2.polylines(orig,[np.array(hull,np.int32)],True,(0,100,100))
            cv2.line(orig,vect1a,vect1b,(0,255,0),5)
            cv2.line(orig,vect2a,vect2b,(255,0,0),5)
        i = i+1
    showMe("Hull",orig)
    return orig

    
#showMe("Hue",H)
#showMe("SAT",S)
#showMe("VAL",V)

    # mouse click should happen now before pressing any key
    # wait for thresholding
    #cv2.waitKey(0)
    # wait for another key press

#myImg = cv2.imread(str(sys.argv[1]))
cap = cv2.VideoCapture(0)
while cv2.waitKey(1)& 0xFF != ord('q'):
    ret,myImg = cap.read()
    f = np.fft.fft2(myImg)
    fshift = np.fft.fftshift(f)
    #magSpectrum = 20*np.log(np.abs(fshift))
    #cv2.imshow('fft',magSpectrum)
    plt.subplot(121),plt.imshow(magSpectrum)
    myImg = cv2.medianBlur(myImg,3)
    cv2.imshow('orig',myImg)
    getFilters(myImg,str(sys.argv[2]))
cap.release()
'''
myTh = thresholding()
myTh.startRecordingThreshold(myImg)  
cv2.waitKey(0)
myTh.saveThresholds(str(sys.argv[2]))
getFilters(myImg,str(sys.argv[2]))
'''


cv2.waitKey(0)
    # save the image
    #cv2.imwrite(str(sys.argv[2]),myFilt)
    # exit
   

cv2.destroyAllWindows()
sys.exit()

    
    
    

